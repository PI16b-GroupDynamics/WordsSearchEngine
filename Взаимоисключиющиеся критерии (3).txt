          // Проверка на совместимость выбранных критериев.
        private void CheckCriteriaIntegrity(object sender, EventArgs e)
        {
            // Ограничиваем доступ к взаимоисключиющимся критериям.

            // Выбран критерий "Слова с прописной буквы".
            if (CapitalizedW.Checked)
                ChangeCriteriaAccess(abbreviation: "false");
            else if (!WCombination.Checked) ChangeCriteriaAccess(abbreviation: "true");

            // Выбран критерий "Аббревиатуры".
            if (AbbreviationW.Checked)
                ChangeCriteriaAccess("false", combination: "false");
            else ChangeCriteriaAccess("true", combination: "true");

            // Выбран критерий "Комбинация букв".
            if (WCombination.Checked) ChangeCriteriaAccess(abbreviation: "false");
            else if (!CapitalizedW.Checked) ChangeCriteriaAccess(abbreviation: "true");

            // Огриничиваем доступ к критерию "Заданное слово", если выбран хотя бы один какой-то критерий.
            if (CapitalizedW.Checked || AbbreviationW.Checked || EnglishWordsCriteria.Checked
                || WLength.Checked || WCombination.Checked)
                ChangeCriteriaAccess(givenWord: "false");
            else ChangeCriteriaAccess(givenWord: "true");

            if (!GivenW.Checked) return;

            // Если выбран критерий "заданное слово", то у остальных критерияев снимаем отметку и ограничиваем доступ.
            ChangeCriteriaAccess("false", "false", "false", "false", "false");
        }

        // Изменяем доступ к взаимоисключающимся критериям.
        // Метод изменяет доступ только тогда, когда он задан, в противном случае - оставляет текущее значение.
        private void ChangeCriteriaAccess(string capitalLetter = "", string abbreviation = "", string englishWords = "",
            string length = "", string combination = "", string givenWord = "")
        {
            if (capitalLetter != "")
            {
                CapitalizedW.Enabled = Convert.ToBoolean(capitalLetter);
                if (!Convert.ToBoolean(capitalLetter)) CapitalizedW.Checked = false;
            }

            if (abbreviation != "")
            {
                AbbreviationW.Enabled = Convert.ToBoolean(abbreviation);
                if (!Convert.ToBoolean(abbreviation)) AbbreviationW.Checked = false;
            }

            if (englishWords != "")
            {
                EnglishWordsCriteria.Enabled = Convert.ToBoolean(englishWords);
                if (!Convert.ToBoolean(englishWords)) EnglishWordsCriteria.Checked = false;
            }

            if (length != "")
            {
                WLength.Enabled = Convert.ToBoolean(length);
                LengthValue.Enabled = Convert.ToBoolean(length);
                if (!Convert.ToBoolean(length)) WLength.Checked = false;
            }

            if (combination != "")
            {
                WCombination.Enabled = Convert.ToBoolean(combination);
                CombinationValue.Enabled = Convert.ToBoolean(combination);
                if (!Convert.ToBoolean(combination)) WCombination.Checked = false;
            }

            if (givenWord != "")
            {
                GivenW.Enabled = Convert.ToBoolean(givenWord);
                WordValue.Enabled = Convert.ToBoolean(givenWord);
                if (!Convert.ToBoolean(givenWord)) GivenW.Checked = false;
            }
        }